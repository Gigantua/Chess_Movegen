/*******************************************************************/
/*
The bitboard attacks of Pradyumna Kannan
as part of the board structure.

(c) 2006 Harald Lüßen
*/
/*******************************************************************/

#pragma once
#include <stdint.h>

namespace Chess_Lookup::Rotation 
{

    /*******************************************************************/
/*
The rotated bitboard attacks with special line mapping and switches
as part of the board structure.

(c) 2006 Harald Lüßen
*/
/*******************************************************************/

/*******************************************************************/

/*
    directions and shifts
    +-----+-----+-----+
    |<<= 9|<<= 8|<<= 7|
    +-----+-----+-----+
    |<<= 1|     |>>= 1|
    +-----+-----+-----+
    |>>= 7|>>= 8|>>= 9|
    +-----+-----+-----+

    We use this mapping of the normal board squares to bitboard bits
    +-------------------------+
    | 63 62 61 60 59 58 57 56 | 8
    | 55 54 53 52 51 50 49 48 | 7
    | 47 46 45 44 43 42 41 40 | 6
    | 39 38 37 36 35 35 33 32 | 5
    | 31 30 29 28 27 26 25 24 | 4
    | 23 22 21 20 19 18 17 16 | 3
    | 15 14 13 12 11 10  9  8 | 2
    |  7  6  5  4  3  2  1  0 | 1
    +-------------------------+
       a  b  c  d  e  f  g  h
*/

/*******************************************************************/
    typedef uint64_t Bitboard;
    typedef uint8_t byte;
    typedef std::array<std::array<byte, 8>, 64> byteTable;

// pieces at begin of game in rotated bitboards
    const Bitboard begin_all_rl90 = 0xc3c3c3c3c3c3c3c3ull;
    const Bitboard begin_all_rl45 = 0x870f1e3c78f0e1c3ull;
    const Bitboard begin_all_rr45 = 0xc3e1f0783c1e0f87ull;

    Bitboard all_rl90_{};
    Bitboard all_rl45_{};
    Bitboard all_rr45_{};
    static constexpr void set_bit(uint64_t& bb_, int nr) { bb_ |= (0x1ull << nr); }
    static constexpr void clear_bit(uint64_t& bb_, int nr) { bb_ &= ~(0x1ull << nr); }


    /*******************************************************************/

    // Bit numbers of the normal board in the rotated board
    const byte normal_to_rl90[64] =
    {
         0,  8, 16, 24, 32, 40, 48, 56,
         1,  9, 17, 25, 33, 41, 49, 57,
         2, 10, 18, 26, 34, 42, 50, 58,
         3, 11, 19, 27, 35, 43, 51, 59,
         4, 12, 20, 28, 36, 44, 52, 60,
         5, 13, 21, 29, 37, 45, 53, 61,
         6, 14, 22, 30, 38, 46, 54, 62,
         7, 15, 23, 31, 39, 47, 55, 63,
    };

    // Bit numbers of the normal board in the rotated board
    // The squares are in the same line as in the normal board.
    const byte normal_to_rl45[64] =
    {
         0, 57, 50, 43, 36, 29, 22, 15,
         8,  1, 58, 51, 44, 37, 30, 23,
        16,  9,  2, 59, 52, 45, 38, 31,
        24, 17, 10,  3, 60, 53, 46, 39,
        32, 25, 18, 11,  4, 61, 54, 47,
        40, 33, 26, 19, 12,  5, 62, 55,
        48, 41, 34, 27, 20, 13,  6, 63,
        56, 49, 42, 35, 28, 21, 14,  7,
    };

    // Bit numbers of the normal board in the rotated board
    // The squares are in the same line as in the normal board.
    const byte normal_to_rr45[64] =
    {
         0,  9, 18, 27, 36, 45, 54, 63,
         8, 17, 26, 35, 44, 53, 62,  7,
        16, 25, 34, 43, 52, 61,  6, 15,
        24, 33, 42, 51, 60,  5, 14, 23,
        32, 41, 50, 59,  4, 13, 22, 31,
        40, 49, 58,  3, 12, 21, 30, 39,
        48, 57,  2, 11, 20, 29, 38, 47,
        56,  1, 10, 19, 28, 37, 46, 55,
    };

    // Shift values of the rotated bitboard for attacks and move generation.
    // Shift the rotated bitboard this number of bits to find the row in the low bits.
    // The index is the square number on the normal board.
    const byte shift_of_rl90[64] =
    {
         0,  8, 16, 24, 32, 40, 48, 56,
         0,  8, 16, 24, 32, 40, 48, 56,
         0,  8, 16, 24, 32, 40, 48, 56,
         0,  8, 16, 24, 32, 40, 48, 56,
         0,  8, 16, 24, 32, 40, 48, 56,
         0,  8, 16, 24, 32, 40, 48, 56,
         0,  8, 16, 24, 32, 40, 48, 56,
         0,  8, 16, 24, 32, 40, 48, 56,
    };

    // Shift values of the rotated bitboard for attacks and move generation.
    // Shift the rotated bitboard this number of bits to find the row in the low bits.
    // The index is the square number on the normal board.
    const byte shift_of_rl45[64] =
    {
         0, 56, 48, 40, 32, 24, 16,  8,
         8,  0, 56, 48, 40, 32, 24, 16,
        16,  8,  0, 56, 48, 40, 32, 24,
        24, 16,  8,  0, 56, 48, 40, 32,
        32, 24, 16,  8,  0, 56, 48, 40,
        40, 32, 24, 16,  8,  0, 56, 48,
        48, 40, 32, 24, 16,  8,  0, 56,
        56, 48, 40, 32, 24, 16,  8,  0,
    };

    // Shift values of the rotated bitboard for attacks and move generation.
    // Shift the rotated bitboard this number of bits to find the row in the low bits.
    // The index is the square number on the normal board.
    const byte shift_of_rr45[64] =
    {
         0,  8, 16, 24, 32, 40, 48, 56,
         8, 16, 24, 32, 40, 48, 56,  0,
        16, 24, 32, 40, 48, 56,  0,  8,
        24, 32, 40, 48, 56,  0,  8, 16,
        32, 40, 48, 56,  0,  8, 16, 24,
        40, 48, 56,  0,  8, 16, 24, 32,
        48, 56,  0,  8, 16, 24, 32, 40,
        56,  0,  8, 16, 24, 32, 40, 48,
    };


    // Index values of the rotated bitboard for attacks and move generation.
    // This is the number of the slider part of the bitboard for use in slider_rl45_to_bitboard.
    // The index is the square number on the normal board.
    const byte index_of_rl45[64] =
    {
        7,  8,  9, 10, 11, 12, 13, 14,
        6,  7,  8,  9, 10, 11, 12, 13,
        5,  6,  7,  8,  9, 10, 11, 12,
        4,  5,  6,  7,  8,  9, 10, 11,
        3,  4,  5,  6,  7,  8,  9, 10,
        2,  3,  4,  5,  6,  7,  8,  9,
        1,  2,  3,  4,  5,  6,  7,  8,
        0,  1,  2,  3,  4,  5,  6,  7,
    };

    // Index values of the rotated bitboard for attacks and move generation.
    // This is the number of the slider part of the bitboard for use in slider_rr45_to_bitboard.
    // The index is the square number on the normal board.
    const byte index_of_rr45[64] =
    {
        0,  1,  2,  3,  4,  5,  6,  7,
        1,  2,  3,  4,  5,  6,  7,  8,
        2,  3,  4,  5,  6,  7,  8,  9,
        3,  4,  5,  6,  7,  8,  9, 10,
        4,  5,  6,  7,  8,  9, 10, 11,
        5,  6,  7,  8,  9, 10, 11, 12,
        6,  7,  8,  9, 10, 11, 12, 13,
        7,  8,  9, 10, 11, 12, 13, 14,
    };


    /*******************************************************************/

    /**
    Put the scattered bits of an sliding attack pattern
    back to the original bitboard.
    */
    static constexpr uint64_t slider_rl90_to_bitboard[256] = { 0x0ull, 0x1ull, 0x100ull, 0x101ull, 0x10000ull, 0x10001ull, 0x10100ull, 0x10101ull, 0x1000000ull, 0x1000001ull, 0x1000100ull, 0x1000101ull, 0x1010000ull, 0x1010001ull, 0x1010100ull, 0x1010101ull, 0x100000000ull, 0x100000001ull, 0x100000100ull, 0x100000101ull, 0x100010000ull, 0x100010001ull, 0x100010100ull, 0x100010101ull, 0x101000000ull, 0x101000001ull, 0x101000100ull, 0x101000101ull, 0x101010000ull, 0x101010001ull, 0x101010100ull, 0x101010101ull, 0x10000000000ull, 0x10000000001ull, 0x10000000100ull, 0x10000000101ull, 0x10000010000ull, 0x10000010001ull, 0x10000010100ull, 0x10000010101ull, 0x10001000000ull, 0x10001000001ull, 0x10001000100ull, 0x10001000101ull, 0x10001010000ull, 0x10001010001ull, 0x10001010100ull, 0x10001010101ull, 0x10100000000ull, 0x10100000001ull, 0x10100000100ull, 0x10100000101ull, 0x10100010000ull, 0x10100010001ull, 0x10100010100ull, 0x10100010101ull, 0x10101000000ull, 0x10101000001ull, 0x10101000100ull, 0x10101000101ull, 0x10101010000ull, 0x10101010001ull, 0x10101010100ull, 0x10101010101ull, 0x1000000000000ull, 0x1000000000001ull, 0x1000000000100ull, 0x1000000000101ull, 0x1000000010000ull, 0x1000000010001ull, 0x1000000010100ull, 0x1000000010101ull, 0x1000001000000ull, 0x1000001000001ull, 0x1000001000100ull, 0x1000001000101ull, 0x1000001010000ull, 0x1000001010001ull, 0x1000001010100ull, 0x1000001010101ull, 0x1000100000000ull, 0x1000100000001ull, 0x1000100000100ull, 0x1000100000101ull, 0x1000100010000ull, 0x1000100010001ull, 0x1000100010100ull, 0x1000100010101ull, 0x1000101000000ull, 0x1000101000001ull, 0x1000101000100ull, 0x1000101000101ull, 0x1000101010000ull, 0x1000101010001ull, 0x1000101010100ull, 0x1000101010101ull, 0x1010000000000ull, 0x1010000000001ull, 0x1010000000100ull, 0x1010000000101ull, 0x1010000010000ull, 0x1010000010001ull, 0x1010000010100ull, 0x1010000010101ull, 0x1010001000000ull, 0x1010001000001ull, 0x1010001000100ull, 0x1010001000101ull, 0x1010001010000ull, 0x1010001010001ull, 0x1010001010100ull, 0x1010001010101ull, 0x1010100000000ull, 0x1010100000001ull, 0x1010100000100ull, 0x1010100000101ull, 0x1010100010000ull, 0x1010100010001ull, 0x1010100010100ull, 0x1010100010101ull, 0x1010101000000ull, 0x1010101000001ull, 0x1010101000100ull, 0x1010101000101ull, 0x1010101010000ull, 0x1010101010001ull, 0x1010101010100ull, 0x1010101010101ull, 0x100000000000000ull, 0x100000000000001ull, 0x100000000000100ull, 0x100000000000101ull, 0x100000000010000ull, 0x100000000010001ull, 0x100000000010100ull, 0x100000000010101ull, 0x100000001000000ull, 0x100000001000001ull, 0x100000001000100ull, 0x100000001000101ull, 0x100000001010000ull, 0x100000001010001ull, 0x100000001010100ull, 0x100000001010101ull, 0x100000100000000ull, 0x100000100000001ull, 0x100000100000100ull, 0x100000100000101ull, 0x100000100010000ull, 0x100000100010001ull, 0x100000100010100ull, 0x100000100010101ull, 0x100000101000000ull, 0x100000101000001ull, 0x100000101000100ull, 0x100000101000101ull, 0x100000101010000ull, 0x100000101010001ull, 0x100000101010100ull, 0x100000101010101ull, 0x100010000000000ull, 0x100010000000001ull, 0x100010000000100ull, 0x100010000000101ull, 0x100010000010000ull, 0x100010000010001ull, 0x100010000010100ull, 0x100010000010101ull, 0x100010001000000ull, 0x100010001000001ull, 0x100010001000100ull, 0x100010001000101ull, 0x100010001010000ull, 0x100010001010001ull, 0x100010001010100ull, 0x100010001010101ull, 0x100010100000000ull, 0x100010100000001ull, 0x100010100000100ull, 0x100010100000101ull, 0x100010100010000ull, 0x100010100010001ull, 0x100010100010100ull, 0x100010100010101ull, 0x100010101000000ull, 0x100010101000001ull, 0x100010101000100ull, 0x100010101000101ull, 0x100010101010000ull, 0x100010101010001ull, 0x100010101010100ull, 0x100010101010101ull, 0x101000000000000ull, 0x101000000000001ull, 0x101000000000100ull, 0x101000000000101ull, 0x101000000010000ull, 0x101000000010001ull, 0x101000000010100ull, 0x101000000010101ull, 0x101000001000000ull, 0x101000001000001ull, 0x101000001000100ull, 0x101000001000101ull, 0x101000001010000ull, 0x101000001010001ull, 0x101000001010100ull, 0x101000001010101ull, 0x101000100000000ull, 0x101000100000001ull, 0x101000100000100ull, 0x101000100000101ull, 0x101000100010000ull, 0x101000100010001ull, 0x101000100010100ull, 0x101000100010101ull, 0x101000101000000ull, 0x101000101000001ull, 0x101000101000100ull, 0x101000101000101ull, 0x101000101010000ull, 0x101000101010001ull, 0x101000101010100ull, 0x101000101010101ull, 0x101010000000000ull, 0x101010000000001ull, 0x101010000000100ull, 0x101010000000101ull, 0x101010000010000ull, 0x101010000010001ull, 0x101010000010100ull, 0x101010000010101ull, 0x101010001000000ull, 0x101010001000001ull, 0x101010001000100ull, 0x101010001000101ull, 0x101010001010000ull, 0x101010001010001ull, 0x101010001010100ull, 0x101010001010101ull, 0x101010100000000ull, 0x101010100000001ull, 0x101010100000100ull, 0x101010100000101ull, 0x101010100010000ull, 0x101010100010001ull, 0x101010100010100ull, 0x101010100010101ull, 0x101010101000000ull, 0x101010101000001ull, 0x101010101000100ull, 0x101010101000101ull, 0x101010101010000ull, 0x101010101010001ull, 0x101010101010100ull, 0x101010101010101ull };

    static constexpr uint64_t rl45_0_bitboard[2] = { 0x0ull, 0x100000000000000ull };
    static constexpr uint64_t rl45_1_bitboard[4] = { 0x0ull, 0x1000000000000ull, 0x200000000000000ull, 0x201000000000000ull };
    static constexpr uint64_t rl45_2_bitboard[8] = { 0x0ull, 0x10000000000ull, 0x2000000000000ull, 0x2010000000000ull, 0x400000000000000ull, 0x400010000000000ull, 0x402000000000000ull, 0x402010000000000ull };
    static constexpr uint64_t rl45_3_bitboard[16] = { 0x0ull, 0x100000000ull, 0x20000000000ull, 0x20100000000ull, 0x4000000000000ull, 0x4000100000000ull, 0x4020000000000ull, 0x4020100000000ull, 0x800000000000000ull, 0x800000100000000ull, 0x800020000000000ull, 0x800020100000000ull, 0x804000000000000ull, 0x804000100000000ull, 0x804020000000000ull, 0x804020100000000ull };
    static constexpr uint64_t rl45_4_bitboard[32] = { 0x0ull, 0x1000000ull, 0x200000000ull, 0x201000000ull, 0x40000000000ull, 0x40001000000ull, 0x40200000000ull, 0x40201000000ull, 0x8000000000000ull, 0x8000001000000ull, 0x8000200000000ull, 0x8000201000000ull, 0x8040000000000ull, 0x8040001000000ull, 0x8040200000000ull, 0x8040201000000ull, 0x1000000000000000ull, 0x1000000001000000ull, 0x1000000200000000ull, 0x1000000201000000ull, 0x1000040000000000ull, 0x1000040001000000ull, 0x1000040200000000ull, 0x1000040201000000ull, 0x1008000000000000ull, 0x1008000001000000ull, 0x1008000200000000ull, 0x1008000201000000ull, 0x1008040000000000ull, 0x1008040001000000ull, 0x1008040200000000ull, 0x1008040201000000ull };
    static constexpr uint64_t rl45_5_bitboard[64] = { 0x0ull, 0x10000ull, 0x2000000ull, 0x2010000ull, 0x400000000ull, 0x400010000ull, 0x402000000ull, 0x402010000ull, 0x80000000000ull, 0x80000010000ull, 0x80002000000ull, 0x80002010000ull, 0x80400000000ull, 0x80400010000ull, 0x80402000000ull, 0x80402010000ull, 0x10000000000000ull, 0x10000000010000ull, 0x10000002000000ull, 0x10000002010000ull, 0x10000400000000ull, 0x10000400010000ull, 0x10000402000000ull, 0x10000402010000ull, 0x10080000000000ull, 0x10080000010000ull, 0x10080002000000ull, 0x10080002010000ull, 0x10080400000000ull, 0x10080400010000ull, 0x10080402000000ull, 0x10080402010000ull, 0x2000000000000000ull, 0x2000000000010000ull, 0x2000000002000000ull, 0x2000000002010000ull, 0x2000000400000000ull, 0x2000000400010000ull, 0x2000000402000000ull, 0x2000000402010000ull, 0x2000080000000000ull, 0x2000080000010000ull, 0x2000080002000000ull, 0x2000080002010000ull, 0x2000080400000000ull, 0x2000080400010000ull, 0x2000080402000000ull, 0x2000080402010000ull, 0x2010000000000000ull, 0x2010000000010000ull, 0x2010000002000000ull, 0x2010000002010000ull, 0x2010000400000000ull, 0x2010000400010000ull, 0x2010000402000000ull, 0x2010000402010000ull, 0x2010080000000000ull, 0x2010080000010000ull, 0x2010080002000000ull, 0x2010080002010000ull, 0x2010080400000000ull, 0x2010080400010000ull, 0x2010080402000000ull, 0x2010080402010000ull };
    static constexpr uint64_t rl45_6_bitboard[128] = { 0x0ull, 0x100ull, 0x20000ull, 0x20100ull, 0x4000000ull, 0x4000100ull, 0x4020000ull, 0x4020100ull, 0x800000000ull, 0x800000100ull, 0x800020000ull, 0x800020100ull, 0x804000000ull, 0x804000100ull, 0x804020000ull, 0x804020100ull, 0x100000000000ull, 0x100000000100ull, 0x100000020000ull, 0x100000020100ull, 0x100004000000ull, 0x100004000100ull, 0x100004020000ull, 0x100004020100ull, 0x100800000000ull, 0x100800000100ull, 0x100800020000ull, 0x100800020100ull, 0x100804000000ull, 0x100804000100ull, 0x100804020000ull, 0x100804020100ull, 0x20000000000000ull, 0x20000000000100ull, 0x20000000020000ull, 0x20000000020100ull, 0x20000004000000ull, 0x20000004000100ull, 0x20000004020000ull, 0x20000004020100ull, 0x20000800000000ull, 0x20000800000100ull, 0x20000800020000ull, 0x20000800020100ull, 0x20000804000000ull, 0x20000804000100ull, 0x20000804020000ull, 0x20000804020100ull, 0x20100000000000ull, 0x20100000000100ull, 0x20100000020000ull, 0x20100000020100ull, 0x20100004000000ull, 0x20100004000100ull, 0x20100004020000ull, 0x20100004020100ull, 0x20100800000000ull, 0x20100800000100ull, 0x20100800020000ull, 0x20100800020100ull, 0x20100804000000ull, 0x20100804000100ull, 0x20100804020000ull, 0x20100804020100ull, 0x4000000000000000ull, 0x4000000000000100ull, 0x4000000000020000ull, 0x4000000000020100ull, 0x4000000004000000ull, 0x4000000004000100ull, 0x4000000004020000ull, 0x4000000004020100ull, 0x4000000800000000ull, 0x4000000800000100ull, 0x4000000800020000ull, 0x4000000800020100ull, 0x4000000804000000ull, 0x4000000804000100ull, 0x4000000804020000ull, 0x4000000804020100ull, 0x4000100000000000ull, 0x4000100000000100ull, 0x4000100000020000ull, 0x4000100000020100ull, 0x4000100004000000ull, 0x4000100004000100ull, 0x4000100004020000ull, 0x4000100004020100ull, 0x4000100800000000ull, 0x4000100800000100ull, 0x4000100800020000ull, 0x4000100800020100ull, 0x4000100804000000ull, 0x4000100804000100ull, 0x4000100804020000ull, 0x4000100804020100ull, 0x4020000000000000ull, 0x4020000000000100ull, 0x4020000000020000ull, 0x4020000000020100ull, 0x4020000004000000ull, 0x4020000004000100ull, 0x4020000004020000ull, 0x4020000004020100ull, 0x4020000800000000ull, 0x4020000800000100ull, 0x4020000800020000ull, 0x4020000800020100ull, 0x4020000804000000ull, 0x4020000804000100ull, 0x4020000804020000ull, 0x4020000804020100ull, 0x4020100000000000ull, 0x4020100000000100ull, 0x4020100000020000ull, 0x4020100000020100ull, 0x4020100004000000ull, 0x4020100004000100ull, 0x4020100004020000ull, 0x4020100004020100ull, 0x4020100800000000ull, 0x4020100800000100ull, 0x4020100800020000ull, 0x4020100800020100ull, 0x4020100804000000ull, 0x4020100804000100ull, 0x4020100804020000ull, 0x4020100804020100ull };
    static constexpr uint64_t rl45_7_bitboard[256] = { 0x0ull, 0x1ull, 0x200ull, 0x201ull, 0x40000ull, 0x40001ull, 0x40200ull, 0x40201ull, 0x8000000ull, 0x8000001ull, 0x8000200ull, 0x8000201ull, 0x8040000ull, 0x8040001ull, 0x8040200ull, 0x8040201ull, 0x1000000000ull, 0x1000000001ull, 0x1000000200ull, 0x1000000201ull, 0x1000040000ull, 0x1000040001ull, 0x1000040200ull, 0x1000040201ull, 0x1008000000ull, 0x1008000001ull, 0x1008000200ull, 0x1008000201ull, 0x1008040000ull, 0x1008040001ull, 0x1008040200ull, 0x1008040201ull, 0x200000000000ull, 0x200000000001ull, 0x200000000200ull, 0x200000000201ull, 0x200000040000ull, 0x200000040001ull, 0x200000040200ull, 0x200000040201ull, 0x200008000000ull, 0x200008000001ull, 0x200008000200ull, 0x200008000201ull, 0x200008040000ull, 0x200008040001ull, 0x200008040200ull, 0x200008040201ull, 0x201000000000ull, 0x201000000001ull, 0x201000000200ull, 0x201000000201ull, 0x201000040000ull, 0x201000040001ull, 0x201000040200ull, 0x201000040201ull, 0x201008000000ull, 0x201008000001ull, 0x201008000200ull, 0x201008000201ull, 0x201008040000ull, 0x201008040001ull, 0x201008040200ull, 0x201008040201ull, 0x40000000000000ull, 0x40000000000001ull, 0x40000000000200ull, 0x40000000000201ull, 0x40000000040000ull, 0x40000000040001ull, 0x40000000040200ull, 0x40000000040201ull, 0x40000008000000ull, 0x40000008000001ull, 0x40000008000200ull, 0x40000008000201ull, 0x40000008040000ull, 0x40000008040001ull, 0x40000008040200ull, 0x40000008040201ull, 0x40001000000000ull, 0x40001000000001ull, 0x40001000000200ull, 0x40001000000201ull, 0x40001000040000ull, 0x40001000040001ull, 0x40001000040200ull, 0x40001000040201ull, 0x40001008000000ull, 0x40001008000001ull, 0x40001008000200ull, 0x40001008000201ull, 0x40001008040000ull, 0x40001008040001ull, 0x40001008040200ull, 0x40001008040201ull, 0x40200000000000ull, 0x40200000000001ull, 0x40200000000200ull, 0x40200000000201ull, 0x40200000040000ull, 0x40200000040001ull, 0x40200000040200ull, 0x40200000040201ull, 0x40200008000000ull, 0x40200008000001ull, 0x40200008000200ull, 0x40200008000201ull, 0x40200008040000ull, 0x40200008040001ull, 0x40200008040200ull, 0x40200008040201ull, 0x40201000000000ull, 0x40201000000001ull, 0x40201000000200ull, 0x40201000000201ull, 0x40201000040000ull, 0x40201000040001ull, 0x40201000040200ull, 0x40201000040201ull, 0x40201008000000ull, 0x40201008000001ull, 0x40201008000200ull, 0x40201008000201ull, 0x40201008040000ull, 0x40201008040001ull, 0x40201008040200ull, 0x40201008040201ull, 0x8000000000000000ull, 0x8000000000000001ull, 0x8000000000000200ull, 0x8000000000000201ull, 0x8000000000040000ull, 0x8000000000040001ull, 0x8000000000040200ull, 0x8000000000040201ull, 0x8000000008000000ull, 0x8000000008000001ull, 0x8000000008000200ull, 0x8000000008000201ull, 0x8000000008040000ull, 0x8000000008040001ull, 0x8000000008040200ull, 0x8000000008040201ull, 0x8000001000000000ull, 0x8000001000000001ull, 0x8000001000000200ull, 0x8000001000000201ull, 0x8000001000040000ull, 0x8000001000040001ull, 0x8000001000040200ull, 0x8000001000040201ull, 0x8000001008000000ull, 0x8000001008000001ull, 0x8000001008000200ull, 0x8000001008000201ull, 0x8000001008040000ull, 0x8000001008040001ull, 0x8000001008040200ull, 0x8000001008040201ull, 0x8000200000000000ull, 0x8000200000000001ull, 0x8000200000000200ull, 0x8000200000000201ull, 0x8000200000040000ull, 0x8000200000040001ull, 0x8000200000040200ull, 0x8000200000040201ull, 0x8000200008000000ull, 0x8000200008000001ull, 0x8000200008000200ull, 0x8000200008000201ull, 0x8000200008040000ull, 0x8000200008040001ull, 0x8000200008040200ull, 0x8000200008040201ull, 0x8000201000000000ull, 0x8000201000000001ull, 0x8000201000000200ull, 0x8000201000000201ull, 0x8000201000040000ull, 0x8000201000040001ull, 0x8000201000040200ull, 0x8000201000040201ull, 0x8000201008000000ull, 0x8000201008000001ull, 0x8000201008000200ull, 0x8000201008000201ull, 0x8000201008040000ull, 0x8000201008040001ull, 0x8000201008040200ull, 0x8000201008040201ull, 0x8040000000000000ull, 0x8040000000000001ull, 0x8040000000000200ull, 0x8040000000000201ull, 0x8040000000040000ull, 0x8040000000040001ull, 0x8040000000040200ull, 0x8040000000040201ull, 0x8040000008000000ull, 0x8040000008000001ull, 0x8040000008000200ull, 0x8040000008000201ull, 0x8040000008040000ull, 0x8040000008040001ull, 0x8040000008040200ull, 0x8040000008040201ull, 0x8040001000000000ull, 0x8040001000000001ull, 0x8040001000000200ull, 0x8040001000000201ull, 0x8040001000040000ull, 0x8040001000040001ull, 0x8040001000040200ull, 0x8040001000040201ull, 0x8040001008000000ull, 0x8040001008000001ull, 0x8040001008000200ull, 0x8040001008000201ull, 0x8040001008040000ull, 0x8040001008040001ull, 0x8040001008040200ull, 0x8040001008040201ull, 0x8040200000000000ull, 0x8040200000000001ull, 0x8040200000000200ull, 0x8040200000000201ull, 0x8040200000040000ull, 0x8040200000040001ull, 0x8040200000040200ull, 0x8040200000040201ull, 0x8040200008000000ull, 0x8040200008000001ull, 0x8040200008000200ull, 0x8040200008000201ull, 0x8040200008040000ull, 0x8040200008040001ull, 0x8040200008040200ull, 0x8040200008040201ull, 0x8040201000000000ull, 0x8040201000000001ull, 0x8040201000000200ull, 0x8040201000000201ull, 0x8040201000040000ull, 0x8040201000040001ull, 0x8040201000040200ull, 0x8040201000040201ull, 0x8040201008000000ull, 0x8040201008000001ull, 0x8040201008000200ull, 0x8040201008000201ull, 0x8040201008040000ull, 0x8040201008040001ull, 0x8040201008040200ull, 0x8040201008040201ull };
    static constexpr uint64_t rl45_8_bitboard[128] = { 0x0ull, 0x2ull, 0x400ull, 0x402ull, 0x80000ull, 0x80002ull, 0x80400ull, 0x80402ull, 0x10000000ull, 0x10000002ull, 0x10000400ull, 0x10000402ull, 0x10080000ull, 0x10080002ull, 0x10080400ull, 0x10080402ull, 0x2000000000ull, 0x2000000002ull, 0x2000000400ull, 0x2000000402ull, 0x2000080000ull, 0x2000080002ull, 0x2000080400ull, 0x2000080402ull, 0x2010000000ull, 0x2010000002ull, 0x2010000400ull, 0x2010000402ull, 0x2010080000ull, 0x2010080002ull, 0x2010080400ull, 0x2010080402ull, 0x400000000000ull, 0x400000000002ull, 0x400000000400ull, 0x400000000402ull, 0x400000080000ull, 0x400000080002ull, 0x400000080400ull, 0x400000080402ull, 0x400010000000ull, 0x400010000002ull, 0x400010000400ull, 0x400010000402ull, 0x400010080000ull, 0x400010080002ull, 0x400010080400ull, 0x400010080402ull, 0x402000000000ull, 0x402000000002ull, 0x402000000400ull, 0x402000000402ull, 0x402000080000ull, 0x402000080002ull, 0x402000080400ull, 0x402000080402ull, 0x402010000000ull, 0x402010000002ull, 0x402010000400ull, 0x402010000402ull, 0x402010080000ull, 0x402010080002ull, 0x402010080400ull, 0x402010080402ull, 0x80000000000000ull, 0x80000000000002ull, 0x80000000000400ull, 0x80000000000402ull, 0x80000000080000ull, 0x80000000080002ull, 0x80000000080400ull, 0x80000000080402ull, 0x80000010000000ull, 0x80000010000002ull, 0x80000010000400ull, 0x80000010000402ull, 0x80000010080000ull, 0x80000010080002ull, 0x80000010080400ull, 0x80000010080402ull, 0x80002000000000ull, 0x80002000000002ull, 0x80002000000400ull, 0x80002000000402ull, 0x80002000080000ull, 0x80002000080002ull, 0x80002000080400ull, 0x80002000080402ull, 0x80002010000000ull, 0x80002010000002ull, 0x80002010000400ull, 0x80002010000402ull, 0x80002010080000ull, 0x80002010080002ull, 0x80002010080400ull, 0x80002010080402ull, 0x80400000000000ull, 0x80400000000002ull, 0x80400000000400ull, 0x80400000000402ull, 0x80400000080000ull, 0x80400000080002ull, 0x80400000080400ull, 0x80400000080402ull, 0x80400010000000ull, 0x80400010000002ull, 0x80400010000400ull, 0x80400010000402ull, 0x80400010080000ull, 0x80400010080002ull, 0x80400010080400ull, 0x80400010080402ull, 0x80402000000000ull, 0x80402000000002ull, 0x80402000000400ull, 0x80402000000402ull, 0x80402000080000ull, 0x80402000080002ull, 0x80402000080400ull, 0x80402000080402ull, 0x80402010000000ull, 0x80402010000002ull, 0x80402010000400ull, 0x80402010000402ull, 0x80402010080000ull, 0x80402010080002ull, 0x80402010080400ull, 0x80402010080402ull };
    static constexpr uint64_t rl45_9_bitboard[64] = { 0x0ull, 0x4ull, 0x800ull, 0x804ull, 0x100000ull, 0x100004ull, 0x100800ull, 0x100804ull, 0x20000000ull, 0x20000004ull, 0x20000800ull, 0x20000804ull, 0x20100000ull, 0x20100004ull, 0x20100800ull, 0x20100804ull, 0x4000000000ull, 0x4000000004ull, 0x4000000800ull, 0x4000000804ull, 0x4000100000ull, 0x4000100004ull, 0x4000100800ull, 0x4000100804ull, 0x4020000000ull, 0x4020000004ull, 0x4020000800ull, 0x4020000804ull, 0x4020100000ull, 0x4020100004ull, 0x4020100800ull, 0x4020100804ull, 0x800000000000ull, 0x800000000004ull, 0x800000000800ull, 0x800000000804ull, 0x800000100000ull, 0x800000100004ull, 0x800000100800ull, 0x800000100804ull, 0x800020000000ull, 0x800020000004ull, 0x800020000800ull, 0x800020000804ull, 0x800020100000ull, 0x800020100004ull, 0x800020100800ull, 0x800020100804ull, 0x804000000000ull, 0x804000000004ull, 0x804000000800ull, 0x804000000804ull, 0x804000100000ull, 0x804000100004ull, 0x804000100800ull, 0x804000100804ull, 0x804020000000ull, 0x804020000004ull, 0x804020000800ull, 0x804020000804ull, 0x804020100000ull, 0x804020100004ull, 0x804020100800ull, 0x804020100804ull };
    static constexpr uint64_t rl45_10_bitboard[32] = { 0x0ull, 0x8ull, 0x1000ull, 0x1008ull, 0x200000ull, 0x200008ull, 0x201000ull, 0x201008ull, 0x40000000ull, 0x40000008ull, 0x40001000ull, 0x40001008ull, 0x40200000ull, 0x40200008ull, 0x40201000ull, 0x40201008ull, 0x8000000000ull, 0x8000000008ull, 0x8000001000ull, 0x8000001008ull, 0x8000200000ull, 0x8000200008ull, 0x8000201000ull, 0x8000201008ull, 0x8040000000ull, 0x8040000008ull, 0x8040001000ull, 0x8040001008ull, 0x8040200000ull, 0x8040200008ull, 0x8040201000ull, 0x8040201008ull };
    static constexpr uint64_t rl45_11_bitboard[16] = { 0x0ull, 0x10ull, 0x2000ull, 0x2010ull, 0x400000ull, 0x400010ull, 0x402000ull, 0x402010ull, 0x80000000ull, 0x80000010ull, 0x80002000ull, 0x80002010ull, 0x80400000ull, 0x80400010ull, 0x80402000ull, 0x80402010ull };
    static constexpr uint64_t rl45_12_bitboard[8] = { 0x0ull, 0x20ull, 0x4000ull, 0x4020ull, 0x800000ull, 0x800020ull, 0x804000ull, 0x804020ull };
    static constexpr uint64_t rl45_13_bitboard[4] = { 0x0ull, 0x40ull, 0x8000ull, 0x8040ull };
    static constexpr uint64_t rl45_14_bitboard[2] = { 0x0ull, 0x80ull };
    static constexpr uint64_t rr45_0_bitboard[2] = { 0x0ull, 0x1ull };
    static constexpr uint64_t rr45_1_bitboard[4] = { 0x0ull, 0x100ull, 0x2ull, 0x102ull };
    static constexpr uint64_t rr45_2_bitboard[8] = { 0x0ull, 0x10000ull, 0x200ull, 0x10200ull, 0x4ull, 0x10004ull, 0x204ull, 0x10204ull };
    static constexpr uint64_t rr45_3_bitboard[16] = { 0x0ull, 0x1000000ull, 0x20000ull, 0x1020000ull, 0x400ull, 0x1000400ull, 0x20400ull, 0x1020400ull, 0x8ull, 0x1000008ull, 0x20008ull, 0x1020008ull, 0x408ull, 0x1000408ull, 0x20408ull, 0x1020408ull };
    static constexpr uint64_t rr45_4_bitboard[32] = { 0x0ull, 0x100000000ull, 0x2000000ull, 0x102000000ull, 0x40000ull, 0x100040000ull, 0x2040000ull, 0x102040000ull, 0x800ull, 0x100000800ull, 0x2000800ull, 0x102000800ull, 0x40800ull, 0x100040800ull, 0x2040800ull, 0x102040800ull, 0x10ull, 0x100000010ull, 0x2000010ull, 0x102000010ull, 0x40010ull, 0x100040010ull, 0x2040010ull, 0x102040010ull, 0x810ull, 0x100000810ull, 0x2000810ull, 0x102000810ull, 0x40810ull, 0x100040810ull, 0x2040810ull, 0x102040810ull };
    static constexpr uint64_t rr45_5_bitboard[64] = { 0x0ull, 0x10000000000ull, 0x200000000ull, 0x10200000000ull, 0x4000000ull, 0x10004000000ull, 0x204000000ull, 0x10204000000ull, 0x80000ull, 0x10000080000ull, 0x200080000ull, 0x10200080000ull, 0x4080000ull, 0x10004080000ull, 0x204080000ull, 0x10204080000ull, 0x1000ull, 0x10000001000ull, 0x200001000ull, 0x10200001000ull, 0x4001000ull, 0x10004001000ull, 0x204001000ull, 0x10204001000ull, 0x81000ull, 0x10000081000ull, 0x200081000ull, 0x10200081000ull, 0x4081000ull, 0x10004081000ull, 0x204081000ull, 0x10204081000ull, 0x20ull, 0x10000000020ull, 0x200000020ull, 0x10200000020ull, 0x4000020ull, 0x10004000020ull, 0x204000020ull, 0x10204000020ull, 0x80020ull, 0x10000080020ull, 0x200080020ull, 0x10200080020ull, 0x4080020ull, 0x10004080020ull, 0x204080020ull, 0x10204080020ull, 0x1020ull, 0x10000001020ull, 0x200001020ull, 0x10200001020ull, 0x4001020ull, 0x10004001020ull, 0x204001020ull, 0x10204001020ull, 0x81020ull, 0x10000081020ull, 0x200081020ull, 0x10200081020ull, 0x4081020ull, 0x10004081020ull, 0x204081020ull, 0x10204081020ull };
    static constexpr uint64_t rr45_6_bitboard[128] = { 0x0ull, 0x1000000000000ull, 0x20000000000ull, 0x1020000000000ull, 0x400000000ull, 0x1000400000000ull, 0x20400000000ull, 0x1020400000000ull, 0x8000000ull, 0x1000008000000ull, 0x20008000000ull, 0x1020008000000ull, 0x408000000ull, 0x1000408000000ull, 0x20408000000ull, 0x1020408000000ull, 0x100000ull, 0x1000000100000ull, 0x20000100000ull, 0x1020000100000ull, 0x400100000ull, 0x1000400100000ull, 0x20400100000ull, 0x1020400100000ull, 0x8100000ull, 0x1000008100000ull, 0x20008100000ull, 0x1020008100000ull, 0x408100000ull, 0x1000408100000ull, 0x20408100000ull, 0x1020408100000ull, 0x2000ull, 0x1000000002000ull, 0x20000002000ull, 0x1020000002000ull, 0x400002000ull, 0x1000400002000ull, 0x20400002000ull, 0x1020400002000ull, 0x8002000ull, 0x1000008002000ull, 0x20008002000ull, 0x1020008002000ull, 0x408002000ull, 0x1000408002000ull, 0x20408002000ull, 0x1020408002000ull, 0x102000ull, 0x1000000102000ull, 0x20000102000ull, 0x1020000102000ull, 0x400102000ull, 0x1000400102000ull, 0x20400102000ull, 0x1020400102000ull, 0x8102000ull, 0x1000008102000ull, 0x20008102000ull, 0x1020008102000ull, 0x408102000ull, 0x1000408102000ull, 0x20408102000ull, 0x1020408102000ull, 0x40ull, 0x1000000000040ull, 0x20000000040ull, 0x1020000000040ull, 0x400000040ull, 0x1000400000040ull, 0x20400000040ull, 0x1020400000040ull, 0x8000040ull, 0x1000008000040ull, 0x20008000040ull, 0x1020008000040ull, 0x408000040ull, 0x1000408000040ull, 0x20408000040ull, 0x1020408000040ull, 0x100040ull, 0x1000000100040ull, 0x20000100040ull, 0x1020000100040ull, 0x400100040ull, 0x1000400100040ull, 0x20400100040ull, 0x1020400100040ull, 0x8100040ull, 0x1000008100040ull, 0x20008100040ull, 0x1020008100040ull, 0x408100040ull, 0x1000408100040ull, 0x20408100040ull, 0x1020408100040ull, 0x2040ull, 0x1000000002040ull, 0x20000002040ull, 0x1020000002040ull, 0x400002040ull, 0x1000400002040ull, 0x20400002040ull, 0x1020400002040ull, 0x8002040ull, 0x1000008002040ull, 0x20008002040ull, 0x1020008002040ull, 0x408002040ull, 0x1000408002040ull, 0x20408002040ull, 0x1020408002040ull, 0x102040ull, 0x1000000102040ull, 0x20000102040ull, 0x1020000102040ull, 0x400102040ull, 0x1000400102040ull, 0x20400102040ull, 0x1020400102040ull, 0x8102040ull, 0x1000008102040ull, 0x20008102040ull, 0x1020008102040ull, 0x408102040ull, 0x1000408102040ull, 0x20408102040ull, 0x1020408102040ull };
    static constexpr uint64_t rr45_7_bitboard[256] = { 0x0ull, 0x100000000000000ull, 0x2000000000000ull, 0x102000000000000ull, 0x40000000000ull, 0x100040000000000ull, 0x2040000000000ull, 0x102040000000000ull, 0x800000000ull, 0x100000800000000ull, 0x2000800000000ull, 0x102000800000000ull, 0x40800000000ull, 0x100040800000000ull, 0x2040800000000ull, 0x102040800000000ull, 0x10000000ull, 0x100000010000000ull, 0x2000010000000ull, 0x102000010000000ull, 0x40010000000ull, 0x100040010000000ull, 0x2040010000000ull, 0x102040010000000ull, 0x810000000ull, 0x100000810000000ull, 0x2000810000000ull, 0x102000810000000ull, 0x40810000000ull, 0x100040810000000ull, 0x2040810000000ull, 0x102040810000000ull, 0x200000ull, 0x100000000200000ull, 0x2000000200000ull, 0x102000000200000ull, 0x40000200000ull, 0x100040000200000ull, 0x2040000200000ull, 0x102040000200000ull, 0x800200000ull, 0x100000800200000ull, 0x2000800200000ull, 0x102000800200000ull, 0x40800200000ull, 0x100040800200000ull, 0x2040800200000ull, 0x102040800200000ull, 0x10200000ull, 0x100000010200000ull, 0x2000010200000ull, 0x102000010200000ull, 0x40010200000ull, 0x100040010200000ull, 0x2040010200000ull, 0x102040010200000ull, 0x810200000ull, 0x100000810200000ull, 0x2000810200000ull, 0x102000810200000ull, 0x40810200000ull, 0x100040810200000ull, 0x2040810200000ull, 0x102040810200000ull, 0x4000ull, 0x100000000004000ull, 0x2000000004000ull, 0x102000000004000ull, 0x40000004000ull, 0x100040000004000ull, 0x2040000004000ull, 0x102040000004000ull, 0x800004000ull, 0x100000800004000ull, 0x2000800004000ull, 0x102000800004000ull, 0x40800004000ull, 0x100040800004000ull, 0x2040800004000ull, 0x102040800004000ull, 0x10004000ull, 0x100000010004000ull, 0x2000010004000ull, 0x102000010004000ull, 0x40010004000ull, 0x100040010004000ull, 0x2040010004000ull, 0x102040010004000ull, 0x810004000ull, 0x100000810004000ull, 0x2000810004000ull, 0x102000810004000ull, 0x40810004000ull, 0x100040810004000ull, 0x2040810004000ull, 0x102040810004000ull, 0x204000ull, 0x100000000204000ull, 0x2000000204000ull, 0x102000000204000ull, 0x40000204000ull, 0x100040000204000ull, 0x2040000204000ull, 0x102040000204000ull, 0x800204000ull, 0x100000800204000ull, 0x2000800204000ull, 0x102000800204000ull, 0x40800204000ull, 0x100040800204000ull, 0x2040800204000ull, 0x102040800204000ull, 0x10204000ull, 0x100000010204000ull, 0x2000010204000ull, 0x102000010204000ull, 0x40010204000ull, 0x100040010204000ull, 0x2040010204000ull, 0x102040010204000ull, 0x810204000ull, 0x100000810204000ull, 0x2000810204000ull, 0x102000810204000ull, 0x40810204000ull, 0x100040810204000ull, 0x2040810204000ull, 0x102040810204000ull, 0x80ull, 0x100000000000080ull, 0x2000000000080ull, 0x102000000000080ull, 0x40000000080ull, 0x100040000000080ull, 0x2040000000080ull, 0x102040000000080ull, 0x800000080ull, 0x100000800000080ull, 0x2000800000080ull, 0x102000800000080ull, 0x40800000080ull, 0x100040800000080ull, 0x2040800000080ull, 0x102040800000080ull, 0x10000080ull, 0x100000010000080ull, 0x2000010000080ull, 0x102000010000080ull, 0x40010000080ull, 0x100040010000080ull, 0x2040010000080ull, 0x102040010000080ull, 0x810000080ull, 0x100000810000080ull, 0x2000810000080ull, 0x102000810000080ull, 0x40810000080ull, 0x100040810000080ull, 0x2040810000080ull, 0x102040810000080ull, 0x200080ull, 0x100000000200080ull, 0x2000000200080ull, 0x102000000200080ull, 0x40000200080ull, 0x100040000200080ull, 0x2040000200080ull, 0x102040000200080ull, 0x800200080ull, 0x100000800200080ull, 0x2000800200080ull, 0x102000800200080ull, 0x40800200080ull, 0x100040800200080ull, 0x2040800200080ull, 0x102040800200080ull, 0x10200080ull, 0x100000010200080ull, 0x2000010200080ull, 0x102000010200080ull, 0x40010200080ull, 0x100040010200080ull, 0x2040010200080ull, 0x102040010200080ull, 0x810200080ull, 0x100000810200080ull, 0x2000810200080ull, 0x102000810200080ull, 0x40810200080ull, 0x100040810200080ull, 0x2040810200080ull, 0x102040810200080ull, 0x4080ull, 0x100000000004080ull, 0x2000000004080ull, 0x102000000004080ull, 0x40000004080ull, 0x100040000004080ull, 0x2040000004080ull, 0x102040000004080ull, 0x800004080ull, 0x100000800004080ull, 0x2000800004080ull, 0x102000800004080ull, 0x40800004080ull, 0x100040800004080ull, 0x2040800004080ull, 0x102040800004080ull, 0x10004080ull, 0x100000010004080ull, 0x2000010004080ull, 0x102000010004080ull, 0x40010004080ull, 0x100040010004080ull, 0x2040010004080ull, 0x102040010004080ull, 0x810004080ull, 0x100000810004080ull, 0x2000810004080ull, 0x102000810004080ull, 0x40810004080ull, 0x100040810004080ull, 0x2040810004080ull, 0x102040810004080ull, 0x204080ull, 0x100000000204080ull, 0x2000000204080ull, 0x102000000204080ull, 0x40000204080ull, 0x100040000204080ull, 0x2040000204080ull, 0x102040000204080ull, 0x800204080ull, 0x100000800204080ull, 0x2000800204080ull, 0x102000800204080ull, 0x40800204080ull, 0x100040800204080ull, 0x2040800204080ull, 0x102040800204080ull, 0x10204080ull, 0x100000010204080ull, 0x2000010204080ull, 0x102000010204080ull, 0x40010204080ull, 0x100040010204080ull, 0x2040010204080ull, 0x102040010204080ull, 0x810204080ull, 0x100000810204080ull, 0x2000810204080ull, 0x102000810204080ull, 0x40810204080ull, 0x100040810204080ull, 0x2040810204080ull, 0x102040810204080ull };
    static constexpr uint64_t rr45_8_bitboard[128] = { 0x0ull, 0x200000000000000ull, 0x4000000000000ull, 0x204000000000000ull, 0x80000000000ull, 0x200080000000000ull, 0x4080000000000ull, 0x204080000000000ull, 0x1000000000ull, 0x200001000000000ull, 0x4001000000000ull, 0x204001000000000ull, 0x81000000000ull, 0x200081000000000ull, 0x4081000000000ull, 0x204081000000000ull, 0x20000000ull, 0x200000020000000ull, 0x4000020000000ull, 0x204000020000000ull, 0x80020000000ull, 0x200080020000000ull, 0x4080020000000ull, 0x204080020000000ull, 0x1020000000ull, 0x200001020000000ull, 0x4001020000000ull, 0x204001020000000ull, 0x81020000000ull, 0x200081020000000ull, 0x4081020000000ull, 0x204081020000000ull, 0x400000ull, 0x200000000400000ull, 0x4000000400000ull, 0x204000000400000ull, 0x80000400000ull, 0x200080000400000ull, 0x4080000400000ull, 0x204080000400000ull, 0x1000400000ull, 0x200001000400000ull, 0x4001000400000ull, 0x204001000400000ull, 0x81000400000ull, 0x200081000400000ull, 0x4081000400000ull, 0x204081000400000ull, 0x20400000ull, 0x200000020400000ull, 0x4000020400000ull, 0x204000020400000ull, 0x80020400000ull, 0x200080020400000ull, 0x4080020400000ull, 0x204080020400000ull, 0x1020400000ull, 0x200001020400000ull, 0x4001020400000ull, 0x204001020400000ull, 0x81020400000ull, 0x200081020400000ull, 0x4081020400000ull, 0x204081020400000ull, 0x8000ull, 0x200000000008000ull, 0x4000000008000ull, 0x204000000008000ull, 0x80000008000ull, 0x200080000008000ull, 0x4080000008000ull, 0x204080000008000ull, 0x1000008000ull, 0x200001000008000ull, 0x4001000008000ull, 0x204001000008000ull, 0x81000008000ull, 0x200081000008000ull, 0x4081000008000ull, 0x204081000008000ull, 0x20008000ull, 0x200000020008000ull, 0x4000020008000ull, 0x204000020008000ull, 0x80020008000ull, 0x200080020008000ull, 0x4080020008000ull, 0x204080020008000ull, 0x1020008000ull, 0x200001020008000ull, 0x4001020008000ull, 0x204001020008000ull, 0x81020008000ull, 0x200081020008000ull, 0x4081020008000ull, 0x204081020008000ull, 0x408000ull, 0x200000000408000ull, 0x4000000408000ull, 0x204000000408000ull, 0x80000408000ull, 0x200080000408000ull, 0x4080000408000ull, 0x204080000408000ull, 0x1000408000ull, 0x200001000408000ull, 0x4001000408000ull, 0x204001000408000ull, 0x81000408000ull, 0x200081000408000ull, 0x4081000408000ull, 0x204081000408000ull, 0x20408000ull, 0x200000020408000ull, 0x4000020408000ull, 0x204000020408000ull, 0x80020408000ull, 0x200080020408000ull, 0x4080020408000ull, 0x204080020408000ull, 0x1020408000ull, 0x200001020408000ull, 0x4001020408000ull, 0x204001020408000ull, 0x81020408000ull, 0x200081020408000ull, 0x4081020408000ull, 0x204081020408000ull };
    static constexpr uint64_t rr45_9_bitboard[64] = { 0x0ull, 0x400000000000000ull, 0x8000000000000ull, 0x408000000000000ull, 0x100000000000ull, 0x400100000000000ull, 0x8100000000000ull, 0x408100000000000ull, 0x2000000000ull, 0x400002000000000ull, 0x8002000000000ull, 0x408002000000000ull, 0x102000000000ull, 0x400102000000000ull, 0x8102000000000ull, 0x408102000000000ull, 0x40000000ull, 0x400000040000000ull, 0x8000040000000ull, 0x408000040000000ull, 0x100040000000ull, 0x400100040000000ull, 0x8100040000000ull, 0x408100040000000ull, 0x2040000000ull, 0x400002040000000ull, 0x8002040000000ull, 0x408002040000000ull, 0x102040000000ull, 0x400102040000000ull, 0x8102040000000ull, 0x408102040000000ull, 0x800000ull, 0x400000000800000ull, 0x8000000800000ull, 0x408000000800000ull, 0x100000800000ull, 0x400100000800000ull, 0x8100000800000ull, 0x408100000800000ull, 0x2000800000ull, 0x400002000800000ull, 0x8002000800000ull, 0x408002000800000ull, 0x102000800000ull, 0x400102000800000ull, 0x8102000800000ull, 0x408102000800000ull, 0x40800000ull, 0x400000040800000ull, 0x8000040800000ull, 0x408000040800000ull, 0x100040800000ull, 0x400100040800000ull, 0x8100040800000ull, 0x408100040800000ull, 0x2040800000ull, 0x400002040800000ull, 0x8002040800000ull, 0x408002040800000ull, 0x102040800000ull, 0x400102040800000ull, 0x8102040800000ull, 0x408102040800000ull };
    static constexpr uint64_t rr45_10_bitboard[32] = { 0x0ull, 0x800000000000000ull, 0x10000000000000ull, 0x810000000000000ull, 0x200000000000ull, 0x800200000000000ull, 0x10200000000000ull, 0x810200000000000ull, 0x4000000000ull, 0x800004000000000ull, 0x10004000000000ull, 0x810004000000000ull, 0x204000000000ull, 0x800204000000000ull, 0x10204000000000ull, 0x810204000000000ull, 0x80000000ull, 0x800000080000000ull, 0x10000080000000ull, 0x810000080000000ull, 0x200080000000ull, 0x800200080000000ull, 0x10200080000000ull, 0x810200080000000ull, 0x4080000000ull, 0x800004080000000ull, 0x10004080000000ull, 0x810004080000000ull, 0x204080000000ull, 0x800204080000000ull, 0x10204080000000ull, 0x810204080000000ull };
    static constexpr uint64_t rr45_11_bitboard[16] = { 0x0ull, 0x1000000000000000ull, 0x20000000000000ull, 0x1020000000000000ull, 0x400000000000ull, 0x1000400000000000ull, 0x20400000000000ull, 0x1020400000000000ull, 0x8000000000ull, 0x1000008000000000ull, 0x20008000000000ull, 0x1020008000000000ull, 0x408000000000ull, 0x1000408000000000ull, 0x20408000000000ull, 0x1020408000000000ull };
    static constexpr uint64_t rr45_12_bitboard[8] = { 0x0ull, 0x2000000000000000ull, 0x40000000000000ull, 0x2040000000000000ull, 0x800000000000ull, 0x2000800000000000ull, 0x40800000000000ull, 0x2040800000000000ull };
    static constexpr uint64_t rr45_13_bitboard[4] = { 0x0ull, 0x4000000000000000ull, 0x80000000000000ull, 0x4080000000000000ull };
    static constexpr uint64_t rr45_14_bitboard[2] = { 0x0ull, 0x8000000000000000ull };


    constexpr byteTable init_slider_attacks() {
        byteTable buf{};

        // Possible Attacks of a sliding piece (8 positions) in a single line of squares 
        // filled with other pieces (8 bits, 256 values).
        // From this only the middle 6 bits are needed. 
        // The outside bits have no influence on their accessability. 
        // Therefore slider_attacks uses only [64][8] as index.
        // slider_attacks returns a byte with all bits set which can be reached through 
        // empty positions and the first blocked position.

        for (int pattern = 0; pattern < 128; pattern += 2)
        {
            int pos;
            for (pos = 0; pos < 8; ++pos)
            {
                byte result = 0;
                int i;
                for (i = 1; i < 8; ++i)
                {
                    int testpos = pos + i;
                    if (testpos >= 8)
                        break;
                    int testbit = 1 << testpos;
                    result |= testbit;
                    if (pattern & testbit)
                        break;
                }
                for (i = 1; i < 8; ++i)
                {
                    int testpos = pos - i;
                    if (testpos < 0)
                        break;
                    int testbit = 1 << testpos;
                    result |= testbit;
                    if (pattern & testbit)
                        break;
                }
                buf[(pattern >> 1) & 0x3f][pos] = result;
            }
        }
        return buf;
    }

    constexpr byteTable slider_attacks = init_slider_attacks();


    constexpr auto Size = sizeof(slider_rl90_to_bitboard) + sizeof(slider_attacks) + 764 * 2 * sizeof(uint64_t);


    /*******************************************************************/
    /**
    Set the rotated bitboards of all pieces
    */
    void Prepare(uint64_t occ)
    {
        all_rl90_ = 0;
        all_rl45_ = 0;
        all_rr45_ = 0;
        int sq;
        for (sq = 0; sq < 64; ++sq)
        {
            uint64_t mask = 1ull << sq;
            if (occ & mask)
            {
                set_bit(all_rl90_, normal_to_rl90[sq]);
                set_bit(all_rl45_, normal_to_rl45[sq]);
                set_bit(all_rr45_, normal_to_rr45[sq]);
            }
        }
    }


    /*******************************************************************/
    /**
    Get a bitboard with all positions set to 1 which can be attacked
    from a bishop, rook or queen on the square moving in the direction.
    */
    Bitboard direction_attacks(uint64_t occ, byte square, byte dir)
    {
        Bitboard result = 0;
        byte shift;
        byte pos;
        Bitboard pattern;
        byte att;

        // 4 3 2
        // 5 0 1
        // 6 7 8
        switch (dir)
        {
        case 1:
            // normal bitboard
            shift = square & 0x38;
            occ >>= (shift + 1);
            pattern = occ;
            pos = square & 7;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= (1 << pos) - 1;
            result = att;
            result <<= shift;
            break;
        case 5:
            // normal bitboard
            shift = square & 0x38;
            occ >>= (shift + 1);
            pattern = occ;
            pos = square & 7;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= ~((1 << pos) - 1);
            result = att;
            result <<= shift;
            break;
        case 7:
            // rotated rl90 bitboard
            occ = all_rl90_;
            shift = shift_of_rl90[square];
            occ >>= (shift + 1);
            pattern = occ;
            pos = square >> 3;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= (1 << pos) - 1;
            result = slider_rl90_to_bitboard[att];
            result <<= square & 7;
            break;
        case 3:
            // rotated rl90 bitboard
            occ = all_rl90_;
            shift = shift_of_rl90[square];
            occ >>= (shift + 1);
            pattern = occ;
            pos = square >> 3;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= ~((1 << pos) - 1);
            result = slider_rl90_to_bitboard[att];
            result <<= square & 7;
            break;
        case 8:
            // rotated rl45 bitboard
            occ = all_rl45_;
            shift = shift_of_rl45[square];
            occ >>= (shift + 1);
            pattern = occ;
            pos = square & 7;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= (1 << pos) - 1;
            switch (index_of_rl45[square])
            {
            case 0:
                result = rl45_0_bitboard[att & 0x01];
                break;
            case 1:
                result = rl45_1_bitboard[att & 0x03];
                break;
            case 2:
                result = rl45_2_bitboard[att & 0x07];
                break;
            case 3:
                result = rl45_3_bitboard[att & 0x0f];
                break;
            case 4:
                result = rl45_4_bitboard[att & 0x1f];
                break;
            case 5:
                result = rl45_5_bitboard[att & 0x3f];
                break;
            case 6:
                result = rl45_6_bitboard[att & 0x7f];
                break;
            case 7:
                result = rl45_7_bitboard[att];
                break;
            case 8:
                result = rl45_8_bitboard[(att >> 1) & 0x7f];
                break;
            case 9:
                result = rl45_9_bitboard[(att >> 2) & 0x3f];
                break;
            case 10:
                result = rl45_10_bitboard[(att >> 3) & 0x1f];
                break;
            case 11:
                result = rl45_11_bitboard[(att >> 4) & 0x0f];
                break;
            case 12:
                result = rl45_12_bitboard[(att >> 5) & 0x07];
                break;
            case 13:
                result = rl45_13_bitboard[(att >> 6) & 0x03];
                break;
            case 14:
                result = rl45_14_bitboard[(att >> 7) & 0x01];
                break;
            }
            break;
        case 4:
            // rotated rl45 bitboard
            occ = all_rl45_;
            shift = shift_of_rl45[square];
            occ >>= (shift + 1);
            pattern = occ;
            pos = square & 7;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= ~((1 << pos) - 1);
            switch (index_of_rl45[square])
            {
            case 0:
                result = rl45_0_bitboard[att & 0x01];
                break;
            case 1:
                result = rl45_1_bitboard[att & 0x03];
                break;
            case 2:
                result = rl45_2_bitboard[att & 0x07];
                break;
            case 3:
                result = rl45_3_bitboard[att & 0x0f];
                break;
            case 4:
                result = rl45_4_bitboard[att & 0x1f];
                break;
            case 5:
                result = rl45_5_bitboard[att & 0x3f];
                break;
            case 6:
                result = rl45_6_bitboard[att & 0x7f];
                break;
            case 7:
                result = rl45_7_bitboard[att];
                break;
            case 8:
                result = rl45_8_bitboard[(att >> 1) & 0x7f];
                break;
            case 9:
                result = rl45_9_bitboard[(att >> 2) & 0x3f];
                break;
            case 10:
                result = rl45_10_bitboard[(att >> 3) & 0x1f];
                break;
            case 11:
                result = rl45_11_bitboard[(att >> 4) & 0x0f];
                break;
            case 12:
                result = rl45_12_bitboard[(att >> 5) & 0x07];
                break;
            case 13:
                result = rl45_13_bitboard[(att >> 6) & 0x03];
                break;
            case 14:
                result = rl45_14_bitboard[(att >> 7) & 0x01];
                break;
            }
            break;
        case 2:
            // rotated rr45 bitboard
            occ = all_rr45_;
            shift = shift_of_rr45[square];
            occ >>= (shift + 1);
            pattern = occ;
            pos = square & 7;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= (1 << pos) - 1;
            switch (index_of_rr45[square])
            {
            case 0:
                result = rr45_0_bitboard[att & 0x01];
                break;
            case 1:
                result = rr45_1_bitboard[att & 0x03];
                break;
            case 2:
                result = rr45_2_bitboard[att & 0x07];
                break;
            case 3:
                result = rr45_3_bitboard[att & 0x0f];
                break;
            case 4:
                result = rr45_4_bitboard[att & 0x1f];
                break;
            case 5:
                result = rr45_5_bitboard[att & 0x3f];
                break;
            case 6:
                result = rr45_6_bitboard[att & 0x7f];
                break;
            case 7:
                result = rr45_7_bitboard[att];
                break;
            case 8:
                result = rr45_8_bitboard[(att >> 1) & 0x7f];
                break;
            case 9:
                result = rr45_9_bitboard[(att >> 2) & 0x3f];
                break;
            case 10:
                result = rr45_10_bitboard[(att >> 3) & 0x1f];
                break;
            case 11:
                result = rr45_11_bitboard[(att >> 4) & 0x0f];
                break;
            case 12:
                result = rr45_12_bitboard[(att >> 5) & 0x07];
                break;
            case 13:
                result = rr45_13_bitboard[(att >> 6) & 0x03];
                break;
            case 14:
                result = rr45_14_bitboard[(att >> 7) & 0x01];
                break;
            }
            break;
        case 6:
            // rotated rr45 bitboard
            occ = all_rr45_;
            shift = shift_of_rr45[square];
            occ >>= (shift + 1);
            pattern = occ;
            pos = square & 7;
            att = slider_attacks[pattern & 0x3f][pos];
            att &= ~((1 << pos) - 1);
            switch (index_of_rr45[square])
            {
            case 0:
                result = rr45_0_bitboard[att & 0x01];
                break;
            case 1:
                result = rr45_1_bitboard[att & 0x03];
                break;
            case 2:
                result = rr45_2_bitboard[att & 0x07];
                break;
            case 3:
                result = rr45_3_bitboard[att & 0x0f];
                break;
            case 4:
                result = rr45_4_bitboard[att & 0x1f];
                break;
            case 5:
                result = rr45_5_bitboard[att & 0x3f];
                break;
            case 6:
                result = rr45_6_bitboard[att & 0x7f];
                break;
            case 7:
                result = rr45_7_bitboard[att];
                break;
            case 8:
                result = rr45_8_bitboard[(att >> 1) & 0x7f];
                break;
            case 9:
                result = rr45_9_bitboard[(att >> 2) & 0x3f];
                break;
            case 10:
                result = rr45_10_bitboard[(att >> 3) & 0x1f];
                break;
            case 11:
                result = rr45_11_bitboard[(att >> 4) & 0x0f];
                break;
            case 12:
                result = rr45_12_bitboard[(att >> 5) & 0x07];
                break;
            case 13:
                result = rr45_13_bitboard[(att >> 6) & 0x03];
                break;
            case 14:
                result = rr45_14_bitboard[(att >> 7) & 0x01];
                break;
            }
            break;
        default:
            result = 0;
            break;
        }

        return result;
    }

    static constexpr void Move(int from, int to) {
       clear_bit(all_rl90_, normal_to_rl90[from]);
       set_bit(all_rl90_, normal_to_rl90[to]);
       clear_bit(all_rl45_, normal_to_rl45[from]);
       set_bit(all_rl45_, normal_to_rl45[to]);
       clear_bit(all_rr45_, normal_to_rr45[from]);
       set_bit(all_rr45_, normal_to_rr45[to]);
    }

    static constexpr void Move_Take(int from, int to) {
        clear_bit(all_rl90_, normal_to_rl90[from]);
        clear_bit(all_rl45_, normal_to_rl45[from]);
        clear_bit(all_rr45_, normal_to_rr45[from]);
    }


    /*******************************************************************/

    /**
    Get a bitboard with all positions set to 1 which can be attacked
    from a rook or queen on the square.
    */
    Bitboard orthogonal_attacks(uint64_t occ, byte square)
    {
        Bitboard result;

        // normal bitboard
        byte shift = square & 0x38;
        occ >>= (shift + 1);
        Bitboard pattern = occ;
        byte att = slider_attacks[pattern & 0x3f][square & 7];
        result = att;
        result <<= shift;

        // rotated rl90 bitboard
        occ = all_rl90_;
        shift = shift_of_rl90[square];
        occ >>= (shift + 1);
        pattern = occ;
        att = slider_attacks[pattern & 0x3f][square >> 3];
        occ = slider_rl90_to_bitboard[att];
        occ <<= square & 7;
        result |= occ;

        return result;
    }


    /*******************************************************************/

    /**
    Get a bitboard with all positions set to 1 which can be attacked
    from a bishop or queen on the square.
    */
    Bitboard diagonal_attacks(byte square)
    {
        Bitboard result = 0;

        // rotated rl45 bitboard
        Bitboard occ = all_rl45_;
        byte shift = shift_of_rl45[square];
        occ >>= (shift + 1);
        Bitboard pattern = occ;
        byte att = slider_attacks[pattern & 0x3f][square & 7];
        switch (index_of_rl45[square])
        {
        case 0:
            result = rl45_0_bitboard[att & 0x01];
            break;
        case 1:
            result = rl45_1_bitboard[att & 0x03];
            break;
        case 2:
            result = rl45_2_bitboard[att & 0x07];
            break;
        case 3:
            result = rl45_3_bitboard[att & 0x0f];
            break;
        case 4:
            result = rl45_4_bitboard[att & 0x1f];
            break;
        case 5:
            result = rl45_5_bitboard[att & 0x3f];
            break;
        case 6:
            result = rl45_6_bitboard[att & 0x7f];
            break;
        case 7:
            result = rl45_7_bitboard[att];
            break;
        case 8:
            result = rl45_8_bitboard[(att >> 1) & 0x7f];
            break;
        case 9:
            result = rl45_9_bitboard[(att >> 2) & 0x3f];
            break;
        case 10:
            result = rl45_10_bitboard[(att >> 3) & 0x1f];
            break;
        case 11:
            result = rl45_11_bitboard[(att >> 4) & 0x0f];
            break;
        case 12:
            result = rl45_12_bitboard[(att >> 5) & 0x07];
            break;
        case 13:
            result = rl45_13_bitboard[(att >> 6) & 0x03];
            break;
        case 14:
            result = rl45_14_bitboard[(att >> 7) & 0x01];
            break;
        }

        // rotated rr45 bitboard
        occ = all_rr45_;
        shift = shift_of_rr45[square];
        occ >>= (shift + 1);
        pattern = (byte)occ;
        att = slider_attacks[pattern & 0x3f][square & 7];
        switch (index_of_rr45[square])
        {
        case 0:
            result |= rr45_0_bitboard[att & 0x01];
            break;
        case 1:
            result |= rr45_1_bitboard[att & 0x03];
            break;
        case 2:
            result |= rr45_2_bitboard[att & 0x07];
            break;
        case 3:
            result |= rr45_3_bitboard[att & 0x0f];
            break;
        case 4:
            result |= rr45_4_bitboard[att & 0x1f];
            break;
        case 5:
            result |= rr45_5_bitboard[att & 0x3f];
            break;
        case 6:
            result |= rr45_6_bitboard[att & 0x7f];
            break;
        case 7:
            result |= rr45_7_bitboard[att];
            break;
        case 8:
            result |= rr45_8_bitboard[(att >> 1) & 0x7f];
            break;
        case 9:
            result |= rr45_9_bitboard[(att >> 2) & 0x3f];
            break;
        case 10:
            result |= rr45_10_bitboard[(att >> 3) & 0x1f];
            break;
        case 11:
            result |= rr45_11_bitboard[(att >> 4) & 0x0f];
            break;
        case 12:
            result |= rr45_12_bitboard[(att >> 5) & 0x07];
            break;
        case 13:
            result |= rr45_13_bitboard[(att >> 6) & 0x03];
            break;
        case 14:
            result |= rr45_14_bitboard[(att >> 7) & 0x01];
            break;
        }

        return result;
    }


    uint64_t Queen(int square, uint64_t occ) {
        return orthogonal_attacks(occ, square) | diagonal_attacks(square);
    }

    /*******************************************************************/

}